{"version":3,"sources":["Close-512.png","CostNode.jsx","App.jsx","index.js"],"names":["module","exports","closeImg","require","CostNode","props","useState","costType","setCostType","costAmount","setCostAmount","costID","pattern","useEffect","onChange","className","Form","Control","type","value","e","target","num","match","parseInt","replace","Number","MAX_SAFE_INTEGER","length","src","alt","onClick","removeNode","style","width","height","postData","a","async","url","data","fetch","method","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","stateNames","App","taxes","taxType","taxValue","average_rent","month","allBeds","oneBed","twoBeds","results","setResults","city","setCity","salary","setSalary","isLoading","setIsLoading","state","setState","cityValue","setCityValue","modalMessage","setModalMessage","amount","totalCostsList","setTotalCostsList","switchAllBed","setSwitchAllBed","switchOneBed","setSwitchOneBed","switchTwoBed","setSwitchTwoBed","switchCustomRent","setSwitchCustomRent","customRent","setCustomRent","showTutorial","setShowTutorial","process","REACT_APP_SERVER_URL","then","catch","toggleRentSwitch","id","numberFormat","currencyFormat","toFixed","totalTaxes","map","item","reduce","b","totalCosts","averageRentDate","averageRentAllBeds","averageRentOneBed","averageRentTwoBed","rentCost","onSubmit","preventDefault","userOptions","timeoutPromise","Promise","resolve","setTimeout","result","race","Object","keys","console","log","calculateNetIncome","Row","InputGroup","aria-describedby","required","updateSalary","placeholder","Feedback","Group","controlId","as","fontSize","options","selectedIndex","text","split","trim","parseCityName","Button","Modal","show","onHide","Header","closeButton","marginRight","ModalBody","Spinner","animation","marginTop","href","Check","label","checked","key","filter","removeCostOfLIving","totalCostIndex","findIndex","x","updateCostOfLivingAmount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac648063.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Close-512.06ccee3b.png\";","import React, {useEffect, useState} from 'react';\nimport {Form} from 'react-bootstrap';\nconst closeImg = require('./Close-512.png');\n\nconst CostNode = (props) => {\n\n    const [costType, setCostType] = useState(props.costType ? props.costType : '');\n    const [costAmount, setCostAmount] = useState(props.costAmount ? props.costAmount : '0');\n    const [costID] = useState(props.costID);\n\n    //Regex Pattern for Money Input\n    const pattern = /^[0-9.,]+$/;\n\n    const numberFormat = (num) => {\n        return parseInt(num.replace(/,/g, ''))\n    };\n\n    //Updates values when costType or costAmount are changed\n    useEffect(() => {\n        props.onChange(costID, costType, costAmount + '');\n    }, [costType, costAmount]);\n\n    return (\n        <div className={'costInfo'}>\n            <Form.Control\n                type=\"text\"\n                className={'costOfLivingType'}\n                value={costType}\n                onChange={(e) => setCostType(e.target.value)}\n            />\n            <div className={'amountBox'}>\n                <Form.Control\n                    type=\"text\"\n                    className={'costOfLivingInput'}\n                    value={costAmount}\n                    onChange={(e) => {\n                        if (e.target.value.match(pattern) && numberFormat(e.target.value) < Number.MAX_SAFE_INTEGER) {\n                            setCostAmount(e.target.value);\n                        } else if (e.target.value.length === 0) {\n                            setCostAmount(0);\n                        }\n                    }}\n                />\n                <img src={closeImg}  alt={'Delete Cost Of Living'} onClick={() => props.removeNode(costID)} style={{width: '10px', height: '10px'}}/>\n            </div>\n        </div>\n    );\n};\n\nexport default CostNode;\n","import React, {useEffect, useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Form, InputGroup, Modal, ModalBody, Row, Spinner} from 'react-bootstrap';\nimport CostNode from './CostNode';\n\n\n//Fetch Method for post Request\nasync function postData(url = '', data = {}) {\n    // Default options are marked with *\n    try {\n        const response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *client\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return await response.json(); // parses JSON response into native JavaScript objects\n    } catch (e) {\n\n    }\n\n}\n\n//Name of States with Abbreviations\nconst stateNames = {\n    'AL': 'Alabama',\n    'AK': 'Alaska',\n    'AZ': 'Arizona',\n    'AR': 'Arkansas',\n    'CA': 'California',\n    'CO': 'Colorado',\n    'CT': 'Connecticut',\n    'DE': 'Delaware',\n    'FL': 'Florida',\n    'GA': 'Georgia',\n    'HI': 'Hawaii',\n    'ID': 'Idaho',\n    'IL': 'Illinois',\n    'IN': 'Indiana',\n    'IA': 'Iowa',\n    'KS': 'Kansas',\n    'KY': 'Kentucky',\n    'LA': 'Louisiana',\n    'ME': 'Maine',\n    'MD': 'Maryland',\n    'MA': 'Massachusetts',\n    'MI': 'Michigan',\n    'MN': 'Minnesota',\n    'MS': 'Mississippi',\n    'MO': 'Missouri',\n    'MT': 'Montana',\n    'NE': 'Nebraska',\n    'NV': 'Nevada',\n    'NH': 'New_Hampshire',\n    'NJ': 'New_Jersey',\n    'NM': 'New_Mexico',\n    'NY': 'New_York',\n    'NC': 'North_Carolina',\n    'ND': 'North_Dakota',\n    'OH': 'Ohio',\n    'OK': 'Oklahoma',\n    'OR': 'Oregon',\n    'PA': 'Pennsylvania',\n    'RI': 'Rhode_Island',\n    'SC': 'South_Carolina',\n    'SD': 'South_Dakota',\n    'TN': 'Tennessee',\n    'TX': 'Texas',\n    'UT': 'Utah',\n    'VT': 'Vermont',\n    'VA': 'Virginia',\n    'WA': 'Washington',\n    'WV': 'West_Virginia',\n    'WI': 'Wisconsin',\n    'WY': 'Wyoming'\n};\n\nconst App = () => {\n\n    //Default State Values\n    const [results, setResults] = useState({\n        taxes: [\n            {\n                taxType: 'Federal Tax',\n                taxValue: '4,342.00'\n            }, {\n                taxType: 'State Tax',\n                taxValue: '2,321.00'\n            }, {\n                taxType: 'Social Security Tax',\n                taxValue: '3,100.00'\n            }, {\n                taxType: 'Medicare Tax',\n                taxValue: '725.00'\n            },\n        ],\n        average_rent: {\n            month: '12/2019',\n            allBeds: '3,417',\n            oneBed: '2,860',\n            twoBeds: '3,675',\n        }\n    });\n    const [city, setCity] = useState('New York');\n    const [salary, setSalary] = useState('50000');\n    const [isLoading, setIsLoading] = useState(false);\n    const [state, setState] = useState('New_York');\n    const [cityValue, setCityValue] = useState('new-york');\n    const [modalMessage, setModalMessage] = useState('Fetching Data From API');\n    const [totalCostsList, setTotalCostsList] = useState([\n        {\n            costID: 0,\n            costType: 'Utilities',\n            amount: 100,\n        },\n        {\n            costID: 1,\n            costType: 'Groceries',\n            amount: 100,\n        },\n        {\n            costID: 2,\n            costType: 'Public Transport',\n            amount: 100,\n        },\n    ]);\n    const [switchAllBed, setSwitchAllBed] = useState(false);\n    const [switchOneBed, setSwitchOneBed] = useState(false);\n    const [switchTwoBed, setSwitchTwoBed] = useState(false);\n    const [switchCustomRent, setSwitchCustomRent] = useState(false);\n    const [customRent, setCustomRent] = useState(0);\n    const [showTutorial, setShowTutorial] = useState(false);\n\n\n    useEffect(() => {\n        const url = 'https://' + process.env.REACT_APP_SERVER_URL + '/';\n        setModalMessage('Waking up the server..');\n        setIsLoading(true);\n        fetch(url)\n            .then(() => {\n                setIsLoading(false);\n                setModalMessage('Fetching Data From API');\n                setShowTutorial(true);\n            })\n            .catch(e => {\n                setIsLoading(false);\n                setModalMessage('Error Fetching Data');\n                setShowTutorial(true);\n            });\n    }, []);\n\n    //Toogles/Untoggles other switches when one of the switch is toggled\n    const toggleRentSwitch = (id) => {\n        if (id === 0) {\n            setSwitchAllBed(!switchAllBed);\n            setSwitchOneBed(false);\n            setSwitchTwoBed(false);\n            setSwitchCustomRent(false);\n        } else if (id === 1) {\n            setSwitchAllBed(false);\n            setSwitchOneBed(!switchOneBed);\n            setSwitchTwoBed(false);\n            setSwitchCustomRent(false);\n        } else if (id === 2) {\n            setSwitchAllBed(false);\n            setSwitchOneBed(false);\n            setSwitchTwoBed(!switchTwoBed);\n            setSwitchCustomRent(false);\n        } else {\n            setSwitchAllBed(false);\n            setSwitchOneBed(false);\n            setSwitchTwoBed(false);\n            setSwitchCustomRent(!switchCustomRent);\n        }\n    };\n\n    const numberFormat = (num) => {\n        return parseInt(num.replace(/,/g, ''));\n    };\n\n    const parseCityName = city => {\n        return city.split(',')[1].trim();\n    };\n\n    //Makes request to backend API with user Information.\n    //API returns information about Taxes and Average Rent\n    const calculateNetIncome = async () => {\n\n        setModalMessage('Fetching Data From API');\n        //Post request options\n        const userOptions = {\n            salary: salary + '',\n            state,\n            city,\n            cityValue,\n        };\n\n        try {\n\n            const timeoutPromise = new Promise((resolve) => {\n                setTimeout(resolve, 10000, false);\n            });\n\n            const url = 'https://' + process.env.REACT_APP_SERVER_URL + '/getdata';\n\n            const result = new Promise((resolve) => {\n                postData(url, userOptions)\n                    .then((result) => resolve(result))\n                    .catch(e => {\n                    });\n            });\n\n            Promise.race([result, timeoutPromise]).then((value) => {\n                if (!value) {\n                    setModalMessage('Error Fetching Data');\n                } else {\n                    if (Object.keys(value.taxes).length === 0 || Object.keys(value.average_rent).length === 0) {\n                        setModalMessage('Error Fetching Data');\n                    } else {\n                        setIsLoading(false);\n                        setResults(value);\n                    }\n                }\n            });\n\n        } catch (e) {\n            console.log(e);\n            setModalMessage('Error Fetching Data');\n        }\n    };\n\n    //Change Handler for City Input\n    const updateCity = (e) => {\n        setCityValue(e.target.options[e.target.selectedIndex].value);\n        setCity(e.target.options[e.target.selectedIndex].text.split(',')[0]);\n        setState(stateNames[parseCityName(e.target.options[e.target.selectedIndex].text)]);\n    };\n\n    //Change Handler for Salary Input\n    const updateSalary = (e) => {\n        const pattern = /^[0-9.,]+$/;\n\n        if (e.target.value.match(pattern) && numberFormat(e.target.value) < Number.MAX_SAFE_INTEGER) {\n            setSalary(e.target.value);\n        } else if (e.target.value.length === 0) {\n            setSalary('');\n        }\n\n    };\n\n    //OnChange Handler for if any CostNode values changes\n    const updateCostOfLivingAmount = (id, costType, amount) => {\n        const totalCostIndex = totalCostsList.findIndex(x => x.costID === id);\n        totalCostsList[totalCostIndex].amount = numberFormat(amount);\n        totalCostsList[totalCostIndex].costType = costType;\n        setTotalCostsList([...totalCostsList]);\n    };\n\n    //Remove Handler for removing Cost Node\n    const removeCostOfLIving = (costID) => {\n        setTotalCostsList([...totalCostsList.filter(item => item.costID !== costID)]);\n    };\n\n    //Formates number to a currency\n    const currencyFormat = (num) => {\n        num = Number.parseInt(num);\n        return '$' + num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '' +\n            '$1,');\n    };\n\n    //Calcualtes Total-Taxes from tax-results received by the API\n    const totalTaxes = results.taxes.map(item => numberFormat(item.taxValue)).reduce((a, b) => a + b);\n    //Calculates Total-Costs from \"Additional Monthly Costs\" sections\n    const totalCosts = totalCostsList.length > 0 ? totalCostsList.map(item => item.amount).reduce((a, b) => a + b) * 12 : 0;\n\n    //Rent values recieved from the API\n    const averageRentDate = results.average_rent.month;\n    const averageRentAllBeds = results.average_rent.allBeds;\n    const averageRentOneBed = results.average_rent.oneBed;\n    const averageRentTwoBed = results.average_rent.twoBeds;\n\n    //Checks which switch is currently active and uses that value for Rent Cost\n    const rentCost = Number.parseInt((switchAllBed ? averageRentAllBeds : (switchOneBed ? averageRentOneBed : (switchTwoBed ? averageRentTwoBed : (switchCustomRent ? customRent + '' : '0')))).replace(/,/g, '').replace('$', '')) * 12;\n\n    return (\n        <div className={'App'}>\n            <div className={'titleDiv'}>\n                <h2 className={'title'}>Net Income Calculator</h2>\n            </div>\n            <Form className={'form'} onSubmit={(e) => {\n                e.preventDefault();\n                setIsLoading(true);\n                calculateNetIncome();\n            }}>\n                <div className={'inputBox'}>\n                    <Row className={'row'} id={'salary'}>\n                        <p className={'rowPara'}>Gross Salary (Annual)</p>\n                        <InputGroup className={'inputGroup'}>\n                            <Form.Control\n                                type=\"text\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                required\n                                className={'inputCustomText'}\n                                onChange={e => updateSalary(e)}\n                                value={salary}\n                                placeholder={'Annual Salary'}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Salary Required\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </Row>\n                    <Row className={'row'}>\n                        <p className={'rowPara'}>City</p>\n                        <Form.Group controlId=\"form.city\" className={'inputGroup'}>\n                            <Form.Control as=\"select\" style={{fontSize: '19px'}} value={cityValue}\n                                          onChange={(city) => updateCity(city)}>\n                                <option value=\"albuquerque\">Albuquerque, NM</option>\n                                <option value=\"anaheim\">Anaheim, CA</option>\n                                <option value=\"anchorage\">Anchorage, AK</option>\n                                <option value=\"arlington-tx\">Arlington, TX</option>\n                                <option value=\"atlanta\">Atlanta, GA</option>\n                                <option value=\"aurora-co\">Aurora, CO</option>\n                                <option value=\"austin\">Austin, TX</option>\n                                <option value=\"bakersfield\">Bakersfield, CA</option>\n                                <option value=\"baltimore\">Baltimore, MD</option>\n                                <option value=\"birmingham\">Birmingham, AL</option>\n                                <option value=\"boston\">Boston, MA</option>\n                                <option value=\"buffalo\">Buffalo, NY</option>\n                                <option value=\"chandler\">Chandler, AZ</option>\n                                <option value=\"charlotte\">Charlotte, NC</option>\n                                <option value=\"chicago\">Chicago, IL</option>\n                                <option value=\"cincinnati\">Cincinnati, OH</option>\n                                <option value=\"cleveland\">Cleveland, OH</option>\n                                <option value=\"colorado-springs\">Colorado Springs, CO</option>\n                                <option value=\"columbus-oh\">Columbus, OH</option>\n                                <option value=\"corpus-christi\">Corpus Christi, TX</option>\n                                <option value=\"dallas\">Dallas, TX</option>\n                                <option value=\"denver\">Denver, CO</option>\n                                <option value=\"detroit\">Detroit, MI</option>\n                                <option value=\"el-paso\">El Paso, TX</option>\n                                <option value=\"fort-wayne\">Fort Wayne, IN</option>\n                                <option value=\"fort-worth\">Fort Worth, TX</option>\n                                <option value=\"fresno\">Fresno, CA</option>\n                                <option value=\"glendale-az\">Glendale, AZ</option>\n                                <option value=\"greensboro\">Greensboro, NC</option>\n                                <option value=\"henderson\">Henderson, NV</option>\n                                <option value=\"honolulu\">Honolulu, HI</option>\n                                <option value=\"houston\">Houston, TX</option>\n                                <option value=\"indianapolis\">Indianapolis, IN</option>\n                                <option value=\"jacksonville-fl\">Jacksonville, FL</option>\n                                <option value=\"jersey-city\">Jersey City, NJ</option>\n                                <option value=\"kansas-city-mo\">Kansas City, MO</option>\n                                <option value=\"las-vegas\">Las Vegas, NV</option>\n                                <option value=\"lexington\">Lexington, KY</option>\n                                <option value=\"lincoln\">Lincoln, NE</option>\n                                <option value=\"long-beach\">Long Beach, CA</option>\n                                <option value=\"los-angeles\">Los Angeles, CA</option>\n                                <option value=\"louisville\">Louisville, KY</option>\n                                <option value=\"memphis\">Memphis, TN</option>\n                                <option value=\"mesa\">Mesa, AZ</option>\n                                <option value=\"miami\">Miami, FL</option>\n                                <option value=\"milwaukee\">Milwaukee, WI</option>\n                                <option value=\"minneapolis\">Minneapolis, MN</option>\n                                <option value=\"nashville\">Nashville, TN</option>\n                                <option value=\"new-orleans\">New Orleans, LA</option>\n                                <option value=\"new-york\">New York, NY</option>\n                                <option value=\"newark\">Newark, NJ</option>\n                                <option value=\"norfolk\">Norfolk, VA</option>\n                                <option value=\"oakland\">Oakland, CA</option>\n                                <option value=\"oklahoma-city\">Oklahoma City, OK</option>\n                                <option value=\"omaha\">Omaha, NE</option>\n                                <option value=\"philadelphia\">Philadelphia, PA</option>\n                                <option value=\"phoenix\">Phoenix, AZ</option>\n                                <option value=\"pittsburgh\">Pittsburgh, PA</option>\n                                <option value=\"plano\">Plano, TX</option>\n                                <option value=\"portland-or\">Portland, OR</option>\n                                <option value=\"raleigh\">Raleigh, NC</option>\n                                <option value=\"riverside\">Riverside, CA</option>\n                                <option value=\"sacramento\">Sacramento, CA</option>\n                                <option value=\"san-antonio\">San Antonio, TX</option>\n                                <option value=\"san-diego\">San Diego, CA</option>\n                                <option value=\"san-francisco\">San Francisco, CA</option>\n                                <option value=\"san-jose\">San Jose, CA</option>\n                                <option value=\"santa-ana\">Santa Ana, CA</option>\n                                <option value=\"scottsdale\">Scottsdale, AZ</option>\n                                <option value=\"seattle\">Seattle, WA</option>\n                                <option value=\"st-louis\">St. Louis, MO</option>\n                                <option value=\"st-paul\">St. Paul, MN</option>\n                                <option value=\"st-petersburg\">St. Petersburg, FL</option>\n                                <option value=\"stockton\">Stockton, CA</option>\n                                <option value=\"tampa\">Tampa, FL</option>\n                                <option value=\"toledo\">Toledo, OH</option>\n                                <option value=\"tucson\">Tucson, AZ</option>\n                                <option value=\"tulsa\">Tulsa, OK</option>\n                                <option value=\"virginia-beach\">Virginia Beach, VA</option>\n                                <option value=\"washington\">Washington, DC</option>\n                                <option value=\"wichita\">Wichita, KS</option>\n                            </Form.Control>\n                        </Form.Group>\n                    </Row>\n                </div>\n                <Button type={'Submit'} className={'submitButton'}>\n                    Calculate Income\n                </Button>\n            </Form>\n            <Modal show={isLoading} onHide={modalMessage === 'Error Fetching Data' ? () => setIsLoading(false) : () => {\n            }}>\n                {modalMessage === 'Error Fetching Data' ?\n                    <Modal.Header className={'modalStyle'} closeButton>\n                        <p className={'modalText'} style={{width: '100%', marginRight: '0'}}>{modalMessage}</p>\n                    </Modal.Header> :\n                    <ModalBody className={'modalStyle'}>\n                        <p className={'modalText'}>{modalMessage}</p>\n                        <Spinner animation=\"border\"/>\n                    </ModalBody>\n                }\n            </Modal>\n            <div className={'results'}>\n                <p className={'resultsTitle'}>Results</p>\n                <div className={'infoBox'}>\n                    <p className={'resultsSubtitle'}>\n                        Tax Info\n                    </p>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Federal Tax</p>\n                        <p className={'costAmount'}>$ {results.taxes[0].taxValue}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>State Tax</p>\n                        <p className={'costAmount'}>$ {results.taxes[1].taxValue}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Social Security Tax</p>\n                        <p className={'costAmount'}>$ {results.taxes[2].taxValue}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Medicare Tax</p>\n                        <p className={'costAmount'}>$ {results.taxes[3].taxValue}</p>\n                    </div>\n                    <a style={{marginTop: '5px'}} href={'https://salaryaftertax.com/us'} target={'_blank'}><p> Read\n                        More </p></a>\n                </div>\n                <div className={'infoBox'}>\n                    <p className={'resultsSubtitle'}>\n                        Average Monthly Rent ({averageRentDate})\n                    </p>\n                    <div className={'costInfo'}>\n                        <div className={'rentInfo'}>\n                            <p className={'costType'} style={{marginRight: '10px'}}>Average Rent All Beds</p>\n                            <Form.Check\n                                type=\"switch\"\n                                id=\"switch-all-bed\"\n                                label=''\n                                checked={switchAllBed}\n                                onChange={() => toggleRentSwitch(0)}\n                            />\n                        </div>\n                        <p className={'costAmount'}>$ {averageRentAllBeds}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <div className={'rentInfo'}>\n                            <p className={'costType'} style={{marginRight: '10px'}}>\n                                Average Rent One Bed\n                            </p>\n                            <Form.Check\n                                type=\"switch\"\n                                id=\"switch-one-bed\"\n                                label=''\n                                checked={switchOneBed}\n                                onChange={() => toggleRentSwitch(1)}\n                            />\n                        </div>\n                        <p className={'costAmount'}>$ {averageRentOneBed}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <div className={'rentInfo'}>\n                            <p className={'costType'} style={{marginRight: '10px'}}>Average Rent Two Beds</p>\n                            <Form.Check\n                                type=\"switch\"\n                                id=\"switch-two-bed\"\n                                label=''\n                                checked={switchTwoBed}\n                                onChange={() => toggleRentSwitch(2)}\n                            />\n                        </div>\n                        <p className={'costAmount'}>$ {averageRentTwoBed}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <div className={'rentInfo'}>\n                            <p className={'costType'} style={{marginRight: '10px'}}>Custom Rent</p>\n                            <Form.Check\n                                type=\"switch\"\n                                id=\"switch-custom-bed\"\n                                label=''\n                                checked={switchCustomRent}\n                                onChange={() => toggleRentSwitch(3)}\n                            />\n                        </div>\n                        <Form.Control\n                            type=\"text\"\n                            className={'rentInput'}\n                            value={customRent}\n                            onChange={(e) => {\n                                const pattern = /^[0-9.,]+$/;\n                                if (e.target.value.match(pattern) && numberFormat(e.target.value) < Number.MAX_SAFE_INTEGER) {\n                                    setCustomRent(e.target.value);\n                                } else if (e.target.value.length === 0) {\n                                    setCustomRent(0);\n                                }\n                            }}\n                        />\n                    </div>\n                    <a style={{marginTop: '5px'}} href={'https://www.rentjungle.com/rentdata/'} target={'_blank'}>\n                        <p> Read More </p></a>\n                </div>\n                <div className={'infoBox costOfLiving'}>\n                    <p className={'resultsSubtitle'}>\n                        Additional Monthly Costs (Optional)\n                    </p>\n                    {totalCostsList.map(item => <CostNode\n                        costType={item.costType}\n                        costAmount={item.amount}\n                        amount={item.amount}\n                        key={item.costID}\n                        costID={item.costID}\n                        removeNode={(costID) => removeCostOfLIving(costID)}\n                        onChange={(costID, costType, amount) => updateCostOfLivingAmount(costID, costType, amount)}\n                    />)}\n                </div>\n                <Button className={'addCostButton'} onClick={() => {\n                    setTotalCostsList([...totalCostsList, {costID: totalCostsList.length}]);\n                }}>\n                    Add Cost\n                </Button>\n                <div className={'infoBox totalResults'}>\n                    <p className={'resultsSubtitle'}>\n                        Total (Annual)\n                    </p>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Gross Income</p>\n                        <p className={'costAmount'}>{salary.length > 0 ? currencyFormat(numberFormat(salary)) : '$0.00'}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Total Taxes</p>\n                        <p className={'costAmount'}>- {currencyFormat(totalTaxes)}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Total Costs</p>\n                        <p className={'costAmount'}>{totalCosts > 0 ? '- ' + currencyFormat(totalCosts) : '$0.00'}</p>\n                    </div>\n                    <div className={'costInfo'}>\n                        <p className={'costType'}>Total Rent</p>\n                        <p className={'costAmount'}>{rentCost > 0 ? '- ' + currencyFormat(rentCost) : '$0.00'}</p>\n                    </div>\n                    <div className={'costInfo totalCost'}>\n                        <p className={'costType totalType'}>Net Income</p>\n                        <p className={'costAmount totalAmount'}>{currencyFormat((salary.length > 0 ? numberFormat(salary) : 0) - rentCost - totalCosts - totalTaxes)} </p>\n                    </div>\n                </div>\n            </div>\n            <Modal show={showTutorial} onHide={() => setShowTutorial(false)}>\n                <Modal.Header className={'modalStyle'} closeButton>\n                    <p className={'modalText'} style={{width: '100%', marginRight: '0'}}>Disclaimer!</p>\n                </Modal.Header>\n                <ModalBody className={'modalStyle'}>\n                    <p className={'modalText'}>Please keep in mind that there are government websites available which\n                        provide up to date information and that changes in policies and tax laws might not have been\n                        considered</p>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}